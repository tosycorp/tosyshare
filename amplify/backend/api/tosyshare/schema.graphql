type Connection @model
  @auth(rules: [{ allow: public, operations: [read, create] }])
  @key(name: "ByCode", fields: ["code"], queryField: "GetConnectionsByCode") {
  id: ID!
  expDate: Int! @ttl
  code: Int!
  hasPin: Boolean!
  connectors: [Connector] @connection(name: "ConnectionConnectors")
}

type Connector @model
  @auth(rules: [{ allow: public, operations: [create, update] }])
  @key(name: "ByConnectionId", fields: ["connectorConnectionId"], queryField: "GetConnectorsByConnectionId") {
  id: ID!
  expDate: Int! @ttl
  identityId: String!
  connection: Connection @connection(name: "ConnectionConnectors")
  connectorConnectionId: ID!
}

type Pin @model
  @auth(rules: [{ allow: public, operations: [read, create] }])
  @key(name: "ByValue", fields: ["value"], queryField: "GetPinsByValue")
  @key(name: "ByConnectionId", fields: ["connectionId"], queryField: "GetPinsByConnectionId") {
  id: ID!
  expDate: Int! @ttl
  value: Int!
  connectionId: ID!
}

enum MessageType {
  STRING
  JSON
}

type Message @model
  @auth(rules: [{ allow: public, operations: [read, create] }])
  @key(name: "ByConnectionId", fields: ["messageConnectionId", "expDate"], queryField: "GetMessagesByConnectionId") {
  id: ID!
  expDate: Int! @ttl
  type: MessageType!
  value: String!
  connection: Connection! @connection
  connector: Connector! @connection
  messageConnectionId: ID!
  messageConnectorId: ID!
}

type Subscription {
  onMessageByConnectionId(messageConnectionId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onConnectorByConnectionId(connectorConnectionId: ID!): Connector
    @aws_subscribe(mutations: ["updateConnector"])
  onPinByConnectionId(connectionId: ID!): Pin
    @aws_subscribe(mutations: ["createPin"])
}
